package com.cts.ServiceImpl;

import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.cts.Constants.CafeConstants;
import com.cts.Dao.CategoryDao;
import com.cts.JWT.JwtFilter;
import com.cts.Service.CategoryService;
import com.cts.POJO.Category;
import com.cts.Utils.CafeUtils;

@Service
public class CategoryServiceImpl implements CategoryService {

	//We need the object of CategoryDao to store the data
	@Autowired
	CategoryDao categoryDao;
	
	@Autowired
	JwtFilter jwtFilter;
	
	@Override
	public ResponseEntity<String> addNewCategory(Map<String, String> requestMap) {
		try {
			if(jwtFilter.isAdmin()) {
				//it sends false as it means id validation is not needed for adding category as it is autogenerated
				if(validateCategoryMap(requestMap,false)) {
					//returns category to store it in database
					categoryDao.save(getCategoryFromMap(requestMap, false));
					return CafeUtils.getResponseEntity("Category Added Successfully",HttpStatus.OK);
				}
			}else {
				return CafeUtils.getResponseEntity(CafeConstants.UNAUTHORIZED_ACCESS ,HttpStatus.UNAUTHORIZED);
			}
		}catch(Exception ex) {
			ex.printStackTrace();
		}
		
		 return CafeUtils.getResponseEntity(CafeConstants.SOMETHING_WENT_WRONG,HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
	
	
	//If validateId is true, it further checks for the presence of the "id" key. If both "name" and "id" exist, it returns true (valid).
	//If validateId is false, it doesn't check for "id" and simply returns true (valid as long as "name" exists).
	//If "name" is not present in the map, it returns false (invalid).
	 private boolean validateCategoryMap(Map<String, String> requestMap, boolean validateId) {
	        if (requestMap.containsKey("name")) {
	            if(requestMap.containsKey("id") && validateId){
	                return true;
	            }else if(!validateId){
	                return true;
	            }
	        }
	        return false;
	    }
	 //A flag indicating whether the operation is for adding a new category (false) or updating an existing one (true).
	 //for adding new Category Id is not needed but for updating id is needed
	 private Category getCategoryFromMap(Map<String,String>requestMap, Boolean isAdd){
	        Category category = new Category();
	        if(isAdd){
	        	//as the id is in string format so we are converting it to Integer and setting it in Category Object
	            category.setId(Integer.parseInt(requestMap.get("id")));
	        }
	        category.setName(requestMap.get("name"));
	        return category;
	    }

	 
	 
	 //getAllCategory
	 @Override
	 public List<Category> getAllCategory(){
		 return categoryDao.findAll();
		 
	 }
	 
	 
	 //updateCategory
	 @Override
	    public ResponseEntity<String> updateCategory(Map<String, String> requestMap) {
	        try {
	            if (jwtFilter.isAdmin()) {
	                if (validateCategoryMap(requestMap , true)) {

	                    Optional optional = categoryDao.findById(Integer.parseInt(requestMap.get("id")));
	                    //if the id is not empty then it will be updated or else it will return that id doesnot exist
	                    if (!optional.isEmpty()) {
	                    	
	                    //we are passing the true because if it is true then only it will set the id in the category object and will return it and it will be saved in database
	                        categoryDao.save(getCategoryFromMap(requestMap,true));
	                        return CafeUtils.getResponseEntity("Category is updated successfully", HttpStatus.OK);

	                    } else {
	                        return CafeUtils.getResponseEntity("Category id doesn't exist", HttpStatus.OK);
	                    }

	                }
	                return CafeUtils.getResponseEntity(CafeConstants.INVALID_DATA, HttpStatus.BAD_REQUEST);
	            } else {
	                return CafeUtils.getResponseEntity(CafeConstants.UNAUTHORIZED_ACCESS, HttpStatus.UNAUTHORIZED);
	            }
	        } catch (Exception ex) {
	            ex.printStackTrace();
	        }
	        return CafeUtils.getResponseEntity(CafeConstants.SOMETHING_WENT_WRONG, HttpStatus.INTERNAL_SERVER_ERROR);
	    }

	
	
}
